(def _args (eval `(assoc {} ~@*command-line-args*)))

(def _parameters {:in (if (contains? _args "--in") (get _args "--in") "in.csv")
                  :out (if (contains? _args "--out") (get _args "--out") "out.csv")})

(def us (read-string (slurp "us.edn")))
(def address-table (read-string (slurp "known-wallets.edn")))

(defmesh root)

(defn find-wallet [addr]
  (->
   .address-table (Take addr) = .addr-name
   (If (IsNotNone)
       (-> .addr-name (ExpectString))
       (-> addr))))

(defwire main
  address-table = .address-table
  (Sequence .output :Types [[Type.String]])
  (get _parameters :in) (FS.Read) (CSV.Read)
  (ForEach
   (->
    (| (Take 0) = .tx-hash)
    (| (Take 3) (Regex.Search #"(\w+)-(\w+)-(\w+)") = .raw-date
       "" >= .date
       .raw-date (Take 3) (AppendTo .date)
       "/" (AppendTo .date)
       .raw-date (Take 2) (AppendTo .date)
       "/" (AppendTo .date)
       .raw-date (Take 1) (AppendTo .date))
    (| (Take 4) (String.ToLower) = .from)
    (| (Take 5) (String.ToLower) = .to)
    (| (Take 6) 
      ;;  (Log)
      ;;  (Regex.Search #"\$(.*)")
      ;;  (Take 1)
       >= .value)
    (| (Take 10) = .token)

    .token
    (When
     (Any ["USDC" "USDT" "BSC-USD"])
     (->
      .from
      (If
       (Any us)
       (->
        ; We send money
        "-" (PrependTo .value)
        (find-wallet .to) = .payee
        ["USD stablecoin payment sent: " .tx-hash] (String.Join) = .desc
        [.date .value .payee .desc] (Log "Sent")
        ;
        )
       (->
        ; We receive money
        (find-wallet .from) = .payee
        ["USD stablecoin payment received: " .tx-hash] (String.Join) = .desc
        [.date .value .payee .desc] (Log "Received")
        ;
        ))>> .output))))
  .output (CSV.Write) >= .csv-output
  "*Date,*Amount,Payee,Description,Reference\n" (PrependTo .csv-output)
  (get _parameters :out) (FS.Write .csv-output))

(schedule root main)
(run root)